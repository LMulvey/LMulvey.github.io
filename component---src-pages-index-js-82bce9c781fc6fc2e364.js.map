{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/helpers/sort.js"],"names":["Index","props","data","site","projects","allMdx","edges","md","BioContainer","to","target","rel","role","aria-label","render","screenClass","StyledRow","justify","includes","sort","sortByDate","map","node","frontmatter","title","banner","bannerurl","slug","fields","sm","lg","xl","key","Math","random","ProjectWrapper","imageSrc","childImageSharp","fluid","src","ProjectTitle","styled","Row","div","h4","pageQuery","compA","compB","dateA","date","dateB","dateObjA","Date","dateObjB"],"mappings":"uSASe,SAASA,EAAMC,GAAQ,IAAD,EAG/BA,EADFC,KAAQC,EAFyB,EAEzBA,KAEKC,EAJoB,EAEnBC,OAERC,MAER,OACE,kBAAC,IAAD,CAAQH,KAAMA,GACZ,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKI,GAAI,IACP,kBAACC,EAAD,KACE,6CACA,6DACkC,IAChC,kBAAC,IAAD,CAAMC,GAAG,+BAA+BC,OAAO,SAASC,IAAI,cAA5D,iBAEQ,IAJV,+BAK+B,IAC7B,kBAAC,IAAD,CACEF,GAAG,gCACHC,OAAO,SACPC,IAAI,cAHN,mBANF,KAeA,8LAGoD,IAClD,kBAAC,IAAD,CAAMF,GAAG,qCAAT,WAEQ,IANV,UAOS,kBAAC,IAAD,CAAMA,GAAG,SAAT,QAPT,0DAQqC,IACnC,0BAAMG,KAAK,MAAMC,aAAW,eAA5B,WAOR,kBAAC,oBAAD,CACEC,OAAQ,SAAAC,GAAW,OACjB,kBAACC,EAAD,CACEC,QACE,CAAC,KAAM,MAAMC,SAASH,GAAe,SAAW,SAGjDX,EACEe,KAAKC,KACLC,KACC,oBACEC,KADF,IAEIC,YAAeC,EAFnB,EAEmBA,MAAkBC,GAFrC,EAE0BC,UAF1B,EAEqCD,QACvBE,EAHd,EAGIC,OAAUD,KAHd,OAME,kBAAC,MAAD,CACEE,GAAI,GACJtB,GAAI,EACJuB,GAAI,EACJC,GAAI,EACJC,IAAKR,EAAwB,KAAhBS,KAAKC,UAElB,kBAAC,IAAD,CAAMzB,GAAE,YAAckB,GACpB,kBAACQ,EAAD,CAAgBC,SAAUX,EAAOY,gBAAgBC,MAAMC,KACrD,kBAACC,EAAD,KAAehB,cAavC,IAAMR,EAAYyB,YAAOC,OAAV,sEAAGD,CAAH,0CAOTN,EAAiBM,IAAOE,IAAV,2EAAGF,CAAH,+bACA,qBAAGL,YA4BjBI,EAAeC,IAAOG,GAAV,yEAAGH,CAAH,uNAmBZjC,EAAeiC,IAAOE,IAAV,yEAAGF,CAAH,2EAMLI,EAAS,a,kCCvJtB,kCAAO,IAAMzB,EAAa,SAAC0B,EAAOC,GAAW,IAC7BC,EAAUF,EAAMxB,KAAKC,YAA3B0B,KACMC,EAAUH,EAAMzB,KAAKC,YAA3B0B,KACFE,EAAW,IAAIC,KAAKJ,GACpBK,EAAW,IAAID,KAAKF,GAG1B,OAAIC,EAAWE,EAAiB,EAC5BA,EAAWF,GAAkB,EAC1B","file":"component---src-pages-index-js-82bce9c781fc6fc2e364.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Col, ScreenClassRender, Row } from 'react-grid-system';\nimport styled from 'styled-components';\n\nimport { sortByDate } from '../helpers/sort';\nimport Layout from '../components/Layout';\nimport Link from '../components/Layout/mdx/Link';\n\nexport default function Index(props) {\n  const {\n    data: { site, allMdx },\n  } = props;\n  const { edges: projects } = allMdx;\n\n  return (\n    <Layout site={site}>\n      <Row>\n        <Col md={12}>\n          <BioContainer>\n            <h2>Hey, I'm Lee!</h2>\n            <p>\n              I‚Äôm a Senior Web Developer with{' '}\n              <Link to=\"https://www.criticalmass.com\" target=\"_blank\" rel=\"noreferrer\">\n                Critical Mass\n              </Link>{' '}\n              and a mentor/instructor with{' '}\n              <Link\n                to=\"https://www.lighthouselabs.ca\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Lighthouse Labs\n              </Link>\n              .\n            </p>\n            <p>\n              An avid cycle commuter with a keen interest in social\n              issues, civic design, and learning about how we interact\n              with the cities we love. While I'm semi-active on{' '}\n              <Link to=\"https://www.twitter.com/leemulvey\">\n                Twitter\n              </Link>{' '}\n              and my <Link to=\"/blog\">blog</Link>, don‚Äôt follow me if\n              you don‚Äôt want to read my opinions{' '}\n              <span role=\"img\" aria-label=\"Peace Emoji\">\n                ‚úåüèª\n              </span>\n            </p>\n          </BioContainer>\n        </Col>\n      </Row>\n      <ScreenClassRender\n        render={screenClass => (\n          <StyledRow\n            justify={\n              ['xs', 'sm'].includes(screenClass) ? 'center' : 'start'\n            }\n          >\n            {projects\n              .sort(sortByDate)\n              .map(\n                ({\n                  node: {\n                    frontmatter: { title, bannerurl, banner },\n                    fields: { slug },\n                  },\n                }) => (\n                  <Col\n                    sm={12}\n                    md={6}\n                    lg={4}\n                    xl={3}\n                    key={title + Math.random() * 4400}\n                  >\n                    <Link to={`/projects${slug}`}>\n                      <ProjectWrapper imageSrc={banner.childImageSharp.fluid.src}>\n                        <ProjectTitle>{title}</ProjectTitle>\n                      </ProjectWrapper>\n                    </Link>\n                  </Col>\n                ),\n              )}\n          </StyledRow>\n        )}\n      />\n    </Layout>\n  );\n}\n\nconst StyledRow = styled(Row)`\n  a {\n    color: white;\n    text-decoration: none;\n  }\n`;\n\nconst ProjectWrapper = styled.div`\n  background: url(${({ imageSrc }) => imageSrc}) center center;\n  background-size: cover;\n  border: 1px solid #f3f3f3;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n  margin: 25px 5px;\n  border-radius: 6px;\n  min-height: 150px;\n  height: 150px;\n  box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.15);\n  transition: all 250ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n\n  :hover {\n    box-shadow: 3px 3px 25px rgba(0, 0, 0, 0.4);\n    transform: scale(1.08);\n  }\n\n  &:after {\n    opacity: 0;\n    &:hover {\n      opacity: 1;\n    }\n  }\n`;\n\nconst ProjectTitle = styled.h4`\n  color: #f3f3f3;\n  text-shadow: 1px 1px 0px rgba(0, 0, 0, 0.8);\n  user-select: none;\n  margin: 0;\n  padding: 5px;\n  background-color: rgba(0, 0, 0, 0.5);\n  width: 100%;\n  text-align: center;\n\n  a {\n    color: white;\n  }\n\n  :hover {\n    text-decoration: none !important;\n  }\n`;\n\nconst BioContainer = styled.div`\n  font-size: 18px;\n  padding: 10px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.15);\n`;\n\nexport const pageQuery = graphql`\n  query siteQuery {\n    allMdx(filter: { fields: { isProject: { eq: true } } }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            banner {\n              childImageSharp {\n                fluid(maxWidth: 400) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n            date\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    site {\n      ...site\n    }\n  }\n`;\n","export const sortByDate = (compA, compB) => {\n  const { date: dateA } = compA.node.frontmatter;\n  const { date: dateB } = compB.node.frontmatter;\n  const dateObjA = new Date(dateA);\n  const dateObjB = new Date(dateB);\n\n  /** Descending (most recent first) */\n  if (dateObjA < dateObjB) return 1;\n  if (dateObjB < dateObjA) return -1;\n  return 0;\n};\n"],"sourceRoot":""}